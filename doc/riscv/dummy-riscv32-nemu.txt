int main() {
  return 0;
}
-----------------------------------------------------------------------------------------------

/Users/airmac/Documents/Workspace/OS_Learn/libs/am-kernels/tests/cpu-tests/build/dummy-riscv32-nemu.elf:     file format elf32-littleriscv


Disassembly of section .text:

1. 第一条指令从abstract-machine/am/src/$ISA/nemu/start.S开始, 设置好栈顶之后就跳转到abstract-machine/am/src/platform/nemu/trm.c的_trm_init()函数处执行.
2. 在_trm_init()中调用main()函数执行程序的主体功能, main()函数还带一个参数, 目前我们暂时不会用到, 后面我们再介绍它.
3. 从main()函数返回后, 调用halt()结束运行.

80000000 <_start>:
80000000:	00000413          	addi	s0,zero,0
80000004:	00009117          	auipc	sp,0x9  # 80009000 = 80000004 + 0x9<<12 - 4
80000008:	ffc10113          	addi	sp,sp,-4 # 80009000 <_end>
8000000c:	00c000ef          	jal	ra,80000018 <_trm_init>

80000010 <main>:
80000010:	00000513          	addi	a0,zero,0
80000014:	00008067          	jalr	zero,0(ra)

80000018 <_trm_init>:
80000018:	ff010113          	addi	sp,sp,-16
8000001c:	00000517          	auipc	a0,0x0
80000020:	01c50513          	addi	a0,a0,28 # 80000038 <_etext>
80000024:	00112623          	sw	ra,12(sp)
80000028:	fe9ff0ef          	jal	ra,80000010 <main>
8000002c:	00050513          	addi	a0,a0,0
80000030:	00100073          	ebreak
80000034:	0000006f          	jal	zero,80000034 <_trm_init+0x1c>


------------------------------------------------------------------------------------------------

riscv64-linux-gnu-objdump -M no-aliases -x  build/dummy-riscv32-nemu.elf

build/dummy-riscv32-nemu.elf:     file format elf32-littleriscv
build/dummy-riscv32-nemu.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
0x70000003 off    0x00001097 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000033 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00000078 memsz 0x00000078 flags r-x
    LOAD off    0x00000094 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000038  80000000  80000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000040  80000038  80000038  00001038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .comment      0000001f  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY
  3 .riscv.attributes 00000033  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80000038 l    d  .rodata	00000000 .rodata
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    df *ABS*	00000000 start.o
00000000 l    df *ABS*	00000000 dummy.c
00000000 l    df *ABS*	00000000 trm.c
80000038 l     O .rodata	00000040 mainargs
80000018 g     F .text	00000020 .hidden _trm_init
80009000 g       .rodata	00000000 _stack_pointer
80000038 g       .text	00000000 _etext
80000000 g       *ABS*	00000000 _pmem_start
80000078 g       .rodata	00000000 _bss_start
80000078 g       .rodata	00000000 edata
80009000 g       .rodata	00000000 _heap_start
80001000 g       .rodata	00000000 _stack_top
80009000 g       .rodata	00000000 end
80000038 g       .text	00000000 etext
80000000 g     F .text	00000010 _start
00000000 g       *ABS*	00000000 _entry_offset
80000010 g     F .text	00000008 .hidden main
80000078 g       .rodata	00000000 _data
80009000 g       .rodata	00000000 _end